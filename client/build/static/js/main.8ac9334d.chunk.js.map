{"version":3,"sources":["components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Quiz","this","setState","loading","axios","get","then","response","questions","data","state","CircularProgress","map","question","Component","App","startQuiz","className","Grid","container","item","md","Slide","direction","in","Fab","variant","onClick","handleStartQuiz","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4UAoCeA,E,mLA/BY,IAAD,OAClBC,KAAKC,SAAS,CACVC,SAAS,IAGbC,IAAMC,IAAI,aAAaC,MAAM,SAACC,GAC1B,EAAKL,SAAS,CACVM,UAAWD,EAASE,OACrB,WACCR,KAAKC,SAAS,CACVC,SAAS,Y,+BAOrB,OACI,6BACQF,KAAKS,MAAMP,QACX,kBAACQ,EAAA,EAAD,MAEAV,KAAKS,MAAMF,UAAUI,KAAI,SAAAC,GAAQ,OAC7B,2BAAIA,EAASA,kB,GAxBlBC,aCiDJC,E,mLA5CPd,KAAKC,SAAS,CACVc,WAAW,M,wCAKff,KAAKC,SAAS,CACVc,WAAW,M,+BAIT,IAAD,OACL,OACI,yBAAKC,UAAU,OACX,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACTlB,KAAKS,MAAMM,UAiBT,kBAACE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAOC,UAAU,OAAOC,GAAIvB,KAAKS,MAAMM,WACnC,kBAAC,EAAD,QAlBR,kBAACE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAKvB,KAAKS,MAAMM,WACpC,4BAAQC,UAAU,cAClB,4EAIA,kBAACQ,EAAA,EAAD,CAAKC,QAAQ,WAAWC,QAAS,kBAAM,EAAKC,oBAA5C,kBAEI,kBAAC,IAAD,gB,GA5BlBd,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ac9334d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nclass Quiz extends Component {\n    componentWillMount () {\n        this.setState({\n            loading: true\n        });\n\n        axios.get('questions').then( (response) => {\n            this.setState({\n                questions: response.data\n            }, function(){\n                this.setState({\n                    loading: false\n                });\n            });\n        });\n    };\n\n    render() {\n        return(\n            <div>\n                {   this.state.loading ? \n                    <CircularProgress/> \n                    :\n                    this.state.questions.map(question => (\n                        <p>{question.question}</p>\n                    ))\n                }\n            </div>\n        );\n    };\n}\n\nexport default Quiz;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Grid, Fab, Slide } from '@material-ui/core';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport Quiz from './components/Quiz';\n\nclass App extends Component {\n\n    componentWillMount() {\n        this.setState({\n            startQuiz: false\n        });\n    };\n\n    handleStartQuiz() {\n        this.setState({\n            startQuiz: true\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Grid container>\n                    {!this.state.startQuiz ? \n                        <Grid item md={12}>\n                            <Slide direction=\"down\" in={!this.state.startQuiz}>\n                                <header className=\"App-header\">\n                                <p>\n                                    Welcome to the Udemy Coding Challenge Quiz!!!\n                                </p>\n\n                                <Fab variant=\"extended\" onClick={() => this.handleStartQuiz()}>\n                                    Start Quiz &nbsp;\n                                    <ArrowForwardIosIcon />\n                                </Fab>\n\n                                </header>\n                            </Slide>\n                        </Grid>\n                        :\n                        <Grid item md={12}>\n                            <Slide direction=\"left\" in={this.state.startQuiz}>\n                                <Quiz/>\n                            </Slide>\n                        </Grid>\n                    }\n                </Grid>\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}