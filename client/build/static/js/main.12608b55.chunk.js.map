{"version":3,"sources":["components/Questions.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Questions","props","state","activeStep","answers","Array","questions","length","fill","openWarning","toAnswer","index","option","this","setState","final","data","id","axios","post","then","response","openScoreModal","event","reason","Stepper","orientation","map","question","Step","key","StepLabel","onClick","setActiveStep","StepContent","Card","elevation","CardHeader","title","CardContent","List","ListItem","button","handleToggle","ListItemIcon","Checkbox","edge","checked","ListItemText","Typography","a","b","c","d","CardActions","disableSpacing","IconButton","aria-label","disabled","handlePrev","handleNext","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","handleClose","variant","severity","Component","Quiz","loading","score","get","showScore","CircularProgress","Dialog","disableBackdropClick","disableEscapeKeyDown","DialogTitle","DialogContent","Box","position","display","value","Math","round","top","left","bottom","right","alignItems","justifyContent","component","color","App","startQuiz","className","Grid","container","item","md","Slide","direction","in","Fab","handleStartQuiz","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12608b55.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Card, CardHeader, CardContent, StepContent, StepLabel, Step, Stepper, Typography, ListItem, List, ListItemIcon, Checkbox, ListItemText, CardActions, IconButton, Snackbar } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport CheckIcon from '@material-ui/icons/Check';\nimport axios from 'axios';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nclass Questions extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeStep: 0,\n            answers: Array(props.questions.length).fill(-1),\n            openWarning: false,\n            toAnswer: ''\n        }\n    }\n\n    handleToggle(index, option) {\n        var answers = this.state.answers\n        answers[index] = option\n        this.setState({\n            answers\n        })\n    }\n\n    handleNext(index) {\n        if (this.state.activeStep === this.props.questions.length - 1) {\n            const questions = this.props.questions\n            const length = questions.length;\n            const answers = this.state.answers;\n            var count = 0;\n            var final = '';\n\n            for (var index = 0; index < length; index++) {\n                if (answers[index] == -1) {\n                    if (final.length == 0) {\n                        final += index+1;\n                    }\n                    else {\n                        final += `, ${index+1}`;\n                    }\n                }\n            }\n\n            if (final.length > 0) {\n                this.setState({\n                    openWarning: true,\n                    toAnswer: final.length > 1 ? `questions ${final}` : `question ${final}`\n                });\n\n                return;\n            }\n\n            var data = {};\n            var a = `Q${1}`;\n            for (var index=0; index < length; index++) {\n                data[`${questions[index].id}`] = answers[index];\n            }\n\n            axios.post('check_answers', {\n                answers: data\n            }).then((response) => {\n                this.props.openScoreModal(response.data);\n            });\n        }\n\n        this.setState({\n            activeStep: index + 1\n        });\n    }\n\n    handlePrev(index) {\n        this.setState({\n            activeStep: index - 1\n        });\n    }\n\n    setActiveStep(index) {\n        this.setState({\n            activeStep: index\n        });\n    }\n\n    handleClose(event, reason) {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        this.setState({\n            openWarning: false\n        });\n    }\n\n    render() {\n        const questions = this.props.questions;\n        const { activeStep, answers, openWarning, toAnswer } = this.state;\n        return(\n            <Stepper activeStep={activeStep} orientation=\"vertical\">\n                {questions.map((question, index) => (\n                    <Step key={`q${index}`}>\n                        <StepLabel onClick={() => this.setActiveStep(index)}>{`Question ${index+1}`}</StepLabel>\n                        <StepContent>\n                            <Card elevation={2}>\n                                <CardHeader title={question.question}/>\n                                <CardContent>\n                                    <List>\n                                        <ListItem key={`a${index}`} button onClick={() => this.handleToggle(index, 0)}>\n                                            <ListItemIcon>\n                                                <Checkbox edge=\"start\" checked={answers[index] === 0}/>\n                                            </ListItemIcon>\n                                            <ListItemText id={`a${index}`}>\n                                                <Typography>{question.a}</Typography>\n                                            </ListItemText>\n                                        </ListItem>\n\n                                        <ListItem key={`b${index}`} button onClick={() => this.handleToggle(index, 1)}>\n                                            <ListItemIcon>\n                                                <Checkbox edge=\"start\" checked={answers[index] === 1}/>\n                                            </ListItemIcon>\n                                            <ListItemText id={`b${index}`}>\n                                                <Typography>{question.b}</Typography>\n                                            </ListItemText>\n                                        </ListItem>\n\n                                        <ListItem key={`c${index}`} button onClick={() => this.handleToggle(index, 2)}>\n                                            <ListItemIcon>\n                                                <Checkbox edge=\"start\" checked={answers[index] === 2}/>\n                                            </ListItemIcon>\n                                            <ListItemText id={`c${index}`}>\n                                                <Typography>{question.c}</Typography>\n                                            </ListItemText>\n                                        </ListItem>\n\n                                        <ListItem key={`d${index}`} button onClick={() => this.handleToggle(index, 3)}>\n                                            <ListItemIcon>\n                                                <Checkbox edge=\"start\" checked={answers[index] === 3}/>\n                                            </ListItemIcon>\n                                            <ListItemText id={`d${index}`}>\n                                                <Typography>{question.d}</Typography>\n                                            </ListItemText>\n                                        </ListItem>\n                                    </List>\n                                </CardContent>\n                                <CardActions disableSpacing>\n                                    <IconButton aria-label=\"prev\" disabled={index === 0} onClick={() => this.handlePrev(index)}>\n                                        <ArrowBackIosIcon/>\n                                    </IconButton>\n                                    <IconButton aria-label=\"next\" onClick={() => this.handleNext(index)}>\n                                        { activeStep === questions.length - 1 ? <CheckIcon/> : <ArrowForwardIosIcon/> }\n                                    </IconButton>\n                                </CardActions>\n                            </Card>\n                        </StepContent>\n                    </Step>\n                ))}\n                <Snackbar anchorOrigin={{vertical:'top', horizontal:'center'}} open={openWarning} autoHideDuration={6000} onClose={(event, reason) => this.handleClose(event, reason)}>\n                    <MuiAlert elevation={6} variant=\"filled\" severity=\"error\">\n                        {`Please answer the ${toAnswer} before submitting.`}\n                    </MuiAlert>\n                </Snackbar>\n            </Stepper>\n        );\n    }\n}\n\nexport default Questions;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Questions from './Questions';\nimport { Dialog, DialogTitle, DialogContent, Box, Typography } from '@material-ui/core';\n\nclass Quiz extends Component {\n    componentWillMount () {\n        this.setState({\n            loading: true,\n            score: 0,\n            questions: []\n        });\n\n        axios.get('questions').then( (response) => {\n            this.setState({\n                questions: response.data\n            }, function(){\n                this.setState({\n                    loading: false\n                });\n            });\n        });\n    };\n\n    openScoreModal(score) {\n        this.setState({\n            score,\n            showScore: true\n        });\n    }\n    render() {\n        return(\n            <div>\n                {   this.state.loading ? \n                    <CircularProgress/> \n                    :\n                    <Questions questions={this.state.questions} openScoreModal={(score) => this.openScoreModal(score)}/>\n                }\n                <Dialog \n                    disableBackdropClick \n                    disableEscapeKeyDown\n                    open={this.state.showScore}\n                >\n                    <DialogTitle>Score</DialogTitle>\n                    <DialogContent>\n                        <Box position=\"relative\" display=\"inline-flex\">\n                            <CircularProgress variant=\"static\" value={Math.round(this.state.score/this.state.questions.length * 100)}/>\n                            <Box top={0} left={0} bottom={0} right={0} position=\"absolute\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">\n                                    {`${this.state.score} / ${this.state.questions.length}`}\n                                </Typography>\n                            </Box>\n                        </Box>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        );\n    };\n}\n\nexport default Quiz;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Grid, Fab, Slide } from '@material-ui/core';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport Quiz from './components/Quiz';\n\nclass App extends Component {\n\n    componentWillMount() {\n        this.setState({\n            startQuiz: false\n        });\n    };\n\n    handleStartQuiz() {\n        this.setState({\n            startQuiz: true\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Grid container>\n                    {!this.state.startQuiz ? \n                        <Grid item md={12}>\n                            <Slide direction=\"down\" in={!this.state.startQuiz}>\n                                <header className=\"App-header\">\n                                <p>\n                                    Welcome to the Udemy Coding Challenge Quiz!!!\n                                </p>\n\n                                <Fab variant=\"extended\" onClick={() => this.handleStartQuiz()}>\n                                    Start Quiz &nbsp;\n                                    <ArrowForwardIosIcon />\n                                </Fab>\n\n                                </header>\n                            </Slide>\n                        </Grid>\n                        :\n                        <Grid item md={12}>\n                            <Slide direction=\"left\" in={this.state.startQuiz}>\n                                <Quiz/>\n                            </Slide>\n                        </Grid>\n                    }\n                </Grid>\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}