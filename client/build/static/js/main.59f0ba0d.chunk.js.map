{"version":3,"sources":["components/Questions.js","components/Warning.js","components/Score.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Questions","props","state","activeStep","answers","Array","questions","length","fill","updateAnswers","index","option","this","setState","Stepper","orientation","map","question","Step","key","StepLabel","onClick","setActiveStep","Typography","style","align","StepContent","Card","elevation","CardContent","gutterBottom","variant","component","List","ListItem","button","handleToggle","ListItemIcon","Checkbox","edge","checked","ListItemText","id","a","b","c","d","CardActions","disableSpacing","Fab","aria-label","disabled","handlePrev","handleNext","Component","Warning","openWarning","handleClose","toAnswer","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","event","reason","severity","Score","score","total","showScore","Dialog","disableBackdropClick","disableEscapeKeyDown","DialogTitle","DialogContent","Box","position","display","CircularProgress","value","Math","round","top","left","bottom","right","alignItems","justifyContent","color","Quiz","loading","axios","get","then","response","data","final","post","openScoreModal","className","handleSubmit","muiTheme","createMuiTheme","typography","fontFamily","App","startQuiz","ThemeProvider","theme","Grid","container","item","md","justify","Slide","direction","in","handleStartQuiz","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.59f0ba0d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Card, CardContent, StepContent, StepLabel, Step, Stepper, Typography, ListItem, List, \n        ListItemIcon, Checkbox, ListItemText, CardActions, Fab, Snackbar } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport CheckIcon from '@material-ui/icons/Check';\n\nclass Questions extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeStep: 0,\n            answers: Array(props.questions.length).fill(-1),\n        }\n\n        this.props.updateAnswers(Array(props.questions.length).fill(-1));\n    }\n\n    handleToggle(index, option) {\n        var answers = this.state.answers\n\n        // if same checkbox is clicked again\n        if (answers[index] === option) {\n            answers[index] = -1;\n        }\n        else {\n            answers[index] = option;\n        }\n\n        this.setState({\n            answers\n        });\n\n        this.props.updateAnswers(answers);\n    }\n\n    handleNext(index) {\n        this.setState({\n            activeStep: index + 1\n        });\n    }\n\n    handlePrev(index) {\n        this.setState({\n            activeStep: index - 1\n        });\n    }\n\n    setActiveStep(index) {\n        this.setState({\n            activeStep: index\n        });\n    }\n\n    render() {\n        const questions = this.props.questions;\n        const { activeStep, answers } = this.state;\n        return(\n            <Stepper activeStep={activeStep} orientation=\"vertical\">\n                {questions.map((question, index) => (\n                    <Step key={`q${index}`}>\n                        <StepLabel onClick={() => this.setActiveStep(index)}>\n                            <Typography style={{\"font-weight\": \"bold\"}}align=\"left\">{`Question ${index+1}`}</Typography>\n                        </StepLabel>\n                        <StepContent>\n                            <Card elevation={3}>\n                                <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"h2\" align=\"left\">{question.question}</Typography>\n                                    <List>\n                                        <ListItem key={`a${index}`} button onClick={() => this.handleToggle(index, 0)}>\n                                            <ListItemIcon>\n                                                <Checkbox edge=\"start\" checked={answers[index] === 0}/>\n                                            </ListItemIcon>\n                                            <ListItemText id={`a${index}`}>\n                                                <Typography>{question.a}</Typography>\n                                            </ListItemText>\n                                        </ListItem>\n\n                                        <ListItem key={`b${index}`} button onClick={() => this.handleToggle(index, 1)}>\n                                            <ListItemIcon>\n                                                <Checkbox edge=\"start\" checked={answers[index] === 1}/>\n                                            </ListItemIcon>\n                                            <ListItemText id={`b${index}`}>\n                                                <Typography>{question.b}</Typography>\n                                            </ListItemText>\n                                        </ListItem>\n\n                                        <ListItem key={`c${index}`} button onClick={() => this.handleToggle(index, 2)}>\n                                            <ListItemIcon>\n                                                <Checkbox edge=\"start\" checked={answers[index] === 2}/>\n                                            </ListItemIcon>\n                                            <ListItemText id={`c${index}`}>\n                                                <Typography>{question.c}</Typography>\n                                            </ListItemText>\n                                        </ListItem>\n\n                                        <ListItem key={`d${index}`} button onClick={() => this.handleToggle(index, 3)}>\n                                            <ListItemIcon>\n                                                <Checkbox edge=\"start\" checked={answers[index] === 3}/>\n                                            </ListItemIcon>\n                                            <ListItemText id={`d${index}`}>\n                                                <Typography>{question.d}</Typography>\n                                            </ListItemText>\n                                        </ListItem>\n                                    </List>\n                                </CardContent>\n                                <CardActions disableSpacing>\n                                    { answers[index] !== -1 &&\n                                        <div>\n                                            <Fab aria-label=\"prev\" disabled={index === 0} onClick={() => this.handlePrev(index)} style={{\"margin\":\"10px\"}}>\n                                                <ArrowBackIosIcon/>\n                                            </Fab>\n                                            <Fab aria-label=\"next\" disabled={index === questions.length - 1} onClick={() => this.handleNext(index)} style={{\"margin\":\"10px\"}}>\n                                                <ArrowForwardIosIcon/>\n                                            </Fab>\n                                        </div>\n                                    }\n                                </CardActions>\n                            </Card>\n                        </StepContent>\n                    </Step>\n                ))}\n            </Stepper>\n        );\n    }\n}\n\nexport default Questions;\n","import React, { Component} from 'react';\nimport { Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nclass Warning extends Component {\n    render() {\n        const { openWarning, handleClose, toAnswer } = this.props;\n\n        return (\n            <Snackbar anchorOrigin={{vertical:'top', horizontal:'center'}} open={openWarning} autoHideDuration={6000} onClose={(event, reason) => handleClose(event, reason)}>\n                <MuiAlert elevation={6} variant=\"filled\" severity=\"error\">\n                    {`Please answer the ${toAnswer} before submitting.`}\n                </MuiAlert>\n            </Snackbar>\n        );\n    }\n}\n\nexport default Warning;\n","import React, { Component } from 'react';\nimport { Box, CircularProgress, Dialog, DialogTitle, DialogContent, Typography } from '@material-ui/core';\n\nclass Score extends Component {\n    render() {\n        const { score, total, showScore } = this.props;\n        return(\n            <Dialog \n                disableBackdropClick \n                disableEscapeKeyDown\n                open={showScore}\n            >\n                <DialogTitle>Score</DialogTitle>\n                <DialogContent>\n                    <Box position=\"relative\" display=\"inline-flex\">\n                        <CircularProgress variant=\"static\" value={Math.round(score/total * 100)}/>\n                        <Box top={0} left={0} bottom={0} right={0} position=\"absolute\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                            <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">\n                                {`${score} / ${total}`}\n                            </Typography>\n                        </Box>\n                    </Box>\n                </DialogContent>\n            </Dialog>\n        );\n    }\n}\n\nexport default Score;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Questions from './Questions';\nimport { Dialog, DialogTitle, DialogContent, Box, Typography, Fab } from '@material-ui/core';\nimport '../App.css';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Warning from './Warning';\nimport Score from './Score';\n\nclass Quiz extends Component {\n    componentWillMount () {\n        this.setState({\n            loading: true,\n            score: 0,\n            questions: [],\n            answers: [],\n            score: 0,\n            openWarning: false,\n            showScore: false,\n            toAnswer: ''\n        });\n\n        axios.get('questions').then( (response) => {\n            this.setState({\n                questions: response.data\n            }, function(){\n                this.setState({\n                    loading: false\n                });\n            });\n        });\n    };\n\n    openScoreModal(score) {\n        this.setState({\n            score,\n            showScore: true\n        });\n    }\n\n    handleSubmit() {\n        const { answers, questions } = this.state;\n        const length = questions.length;\n        var final = '';\n\n        for (var index = 0; index < length; index++) {\n            if (answers[index] == -1) {\n                if (final.length == 0) {\n                    final += index+1;\n                }\n                else {\n                    final += `, ${index+1}`;\n                }\n            }\n        }\n\n        if (final.length > 0) {\n            this.setState({\n                openWarning: true,\n                toAnswer: final.length > 1 ? `questions ${final}` : `question ${final}`\n            });\n\n            return;\n        }\n\n        var data = {};\n        var a = `Q${1}`;\n        for (var index=0; index < length; index++) {\n            data[`${questions[index].id}`] = answers[index];\n        }\n\n        axios.post('check_answers', {\n            answers: data\n        }).then((response) => {\n            this.openScoreModal(response.data);\n        });\n    }\n\n    handleClose(event, reason) {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        this.setState({\n            openWarning: false\n        });\n    }\n\n    updateAnswers(answers) {\n        this.setState({answers});\n    }\n\n    render() {\n        return(\n            <div className=\"quiz\">\n                 <Typography gutterBottom variant=\"h3\" color=\"white\">Udemy Coding Challenge Quiz</Typography>\n                {   this.state.loading ? \n                    <CircularProgress/> \n                    :\n                    <div>\n                        <Questions questions={this.state.questions} openScoreModal={(score) => this.openScoreModal(score)} updateAnswers={(answers)=> this.updateAnswers(answers)}/>\n                    </div>\n                }\n                \n                <Fab variant=\"extended\" onClick={() => this.handleSubmit()} style={{\"margin\":\"10px\"}}>\n                    Submit Quiz &nbsp;\n                    <CheckIcon/>\n                </Fab>\n                \n                <Warning openWarning={this.state.openWarning} toAnswer={this.state.toAnswer} handleClose={(event, reason) => this.handleClose(event, reason)}/>\n                <Score score={this.state.score} total={this.state.questions.length} showScore={this.state.showScore}/>\n\n            </div>\n        );\n    };\n}\n\nexport default Quiz;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Grid, Fab, Slide, Typography } from '@material-ui/core';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport Quiz from './components/Quiz';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst font = \"'Montserrat', sans-serif\";\n\nconst muiTheme = createMuiTheme({\n    typography : {\n        fontFamily: font\n    }\n})\n\nclass App extends Component {\n\n    componentWillMount() {\n        this.setState({\n            startQuiz: false\n        });\n    };\n\n    handleStartQuiz() {\n        this.setState({\n            startQuiz: true\n        });\n    };\n\n    render() {\n        return (\n            <ThemeProvider theme={muiTheme}>\n            <div className=\"App\">\n                <Grid container>\n                    {!this.state.startQuiz ? \n                        <Grid item md={12}>\n                            <Slide direction=\"down\" in={!this.state.startQuiz}>\n                                <header className=\"App-header\">\n                                <Typography gutterBottom variant=\"h3\">\n                                    Welcome to the Udemy Coding Challenge Quiz!!!\n                                </Typography>\n\n                                <Fab variant=\"extended\" onClick={() => this.handleStartQuiz()}>\n                                    Start Quiz &nbsp;\n                                    <ArrowForwardIosIcon />\n                                </Fab>\n\n                                </header>\n                            </Slide>\n                        </Grid>\n                        :\n                        <Grid item md={12} className=\"App-header\" justify=\"center\" alignItems=\"center\">\n                            <Slide direction=\"up\" in={this.state.startQuiz}>\n                                <Quiz/>\n                            </Slide>\n                        </Grid>\n                    }\n                </Grid>\n            </div>\n            </ThemeProvider>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}